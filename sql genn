import streamlit as st
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.messages import AIMessage, HumanMessage
from langchain_openai import ChatOpenAI
from typing import Dict, List
import re

def filter_relevant_tables(question: str, tables_info: List[Dict], max_tables: int = 5) -> List[Dict]:
    """Filter tables based on question relevance"""
    question_lower = question.lower()
    
    # Define keyword mappings to table patterns
    keyword_table_mapping = {
        # Sales/Transaction keywords
        'sales': ['transaction', 'sales', 'order', 'invoice', 'payment'],
        'penjualan': ['transaction', 'sales', 'order', 'invoice', 'payment'],
        'transaksi': ['transaction', 'sales', 'order', 'invoice'],
        'omzet': ['transaction', 'sales', 'revenue'],
        
        # Customer keywords
        'customer': ['customer', 'client', 'user', 'member'],
        'pelanggan': ['customer', 'client', 'user', 'member'],
        'pembeli': ['customer', 'buyer', 'client'],
        
        # Product keywords
        'produk': ['product', 'item', 'goods', 'inventory'],
        'barang': ['product', 'item', 'goods', 'inventory'],
        'item': ['product', 'item', 'goods'],
        
        # Financial keywords
        'revenue': ['revenue', 'income', 'financial', 'accounting'],
        'profit': ['profit', 'margin', 'financial'],
        'keuangan': ['financial', 'accounting', 'payment'],
        
        # Time-based keywords
        'monthly': ['transaction', 'sales', 'revenue', 'report'],
        'bulanan': ['transaction', 'sales', 'revenue', 'report'],
        'yearly': ['transaction', 'sales', 'revenue', 'report'],
    }
    
    # Score tables based on relevance
    table_scores = []
    
    for table in tables_info:
        score = 0
        table_name = table['table'].lower()
        
        # Check if table name matches question keywords
        for keyword, patterns in keyword_table_mapping.items():
            if keyword in question_lower:
                for pattern in patterns:
                    if pattern in table_name:
                        score += 10
                        break
        
        # Boost score for main business tables
        main_table_indicators = ['transaction', 'sales', 'order', 'customer', 'product']
        for indicator in main_table_indicators:
            if indicator in table_name:
                score += 5
        
        # Check field relevance if available
        if table.get('fields'):
            relevant_fields = 0
            for field in table['fields']:
                field_name = field.get('name', '').lower()
                # Count relevant fields based on question
                if any(keyword in question_lower and keyword in field_name 
                       for keyword in ['price', 'total', 'amount', 'quantity', 'date', 'name']):
                    relevant_fields += 1
            score += relevant_fields * 2
        
        table_scores.append((table, score))
    
    # Sort by score and return top tables
    table_scores.sort(key=lambda x: x[1], reverse=True)
    return [table for table, score in table_scores[:max_tables] if score > 0]

def generate_sql_query_optimized(question: str, tables_info: List[Dict], chat_history: list, metabase_client, database_id: int):
    try:
        # Initialize session state
        if 'table_structure_analyzed' not in st.session_state:
            st.session_state.table_structure_analyzed = False
        
        # Filter relevant tables (max 5 tables)
        relevant_tables = filter_relevant_tables(question, tables_info, max_tables=5)
        
        if not relevant_tables:
            # If no relevant tables found, use top 3 main tables
            main_table_keywords = ['transaction', 'sales', 'customer', 'product', 'order']
            relevant_tables = []
            for table in tables_info:
                if any(keyword in table['table'].lower() for keyword in main_table_keywords):
                    relevant_tables.append(table)
                    if len(relevant_tables) >= 3:
                        break
            
            if not relevant_tables:
                relevant_tables = tables_info[:3]  # Fallback to first 3 tables
        
        st.info(f"Menggunakan {len(relevant_tables)} tabel yang relevan dari {len(tables_info)} tabel total")
        
        # Build schema for relevant tables only
        schema_details = ""
        main_table = None
        
        for table in relevant_tables:
            table_name = f"{table['schema']}.{table['table']}"
            schema_details += f"\nTable: {table_name}\n"
            
            if table.get('fields'):
                # Limit fields to most important ones (max 15 per table)
                important_fields = prioritize_fields(table['fields'])
                schema_details += "Key Columns:\n"
                
                for field in important_fields[:15]:  # Limit to 15 fields
                    field_name = field.get('name', 'Unknown')
                    field_type = field.get('type', 'Unknown')
                    display_name = field.get('display_name', field_name)
                    schema_details += f"  - {field_name} ({field_type}) - {display_name}\n"
                
                # Set main table
                if 'transaction' in table['table'].lower() or 'sales' in table['table'].lower():
                    main_table = table_name
            
            schema_details += "\n"
        
        # Use first relevant table as main if not found
        if not main_table and relevant_tables:
            main_table = f"{relevant_tables[0]['schema']}.{relevant_tables[0]['table']}"
        
        # Rest of the function remains the same...
        prompt = ChatPromptTemplate.from_template("""
You are an expert SQL analyst. Generate a precise SQL query using ONLY the relevant tables provided.

Available Tables Schema:
{schema_details}

Primary Table: {main_table}

User Question: {question}

Previous Context: {chat_context}

IMPORTANT RULES:
1. Use ONLY the tables and columns listed above
2. Generate ONLY the SQL query, no explanations
3. Focus on the most relevant tables for the question
4. Use proper JOINs when multiple tables are needed
5. Include appropriate WHERE, GROUP BY, ORDER BY clauses
6. Add LIMIT for large result sets

Generate the SQL query:
""")
        
        llm = ChatOpenAI(model="mistralai/mistral-small-3.2-24b-instruct:free", temperature=0)
        chain = prompt | llm | StrOutputParser()
        
        # Prepare chat context (keep it short)
        chat_context = ""
        if len(chat_history) > 2:
            recent_messages = chat_history[-2:]  # Only last Q&A pair
            for msg in recent_messages:
                if isinstance(msg, HumanMessage):
                    chat_context += f"Q: {msg.content[:50]}...\n"
                elif isinstance(msg, AIMessage):
                    chat_context += f"A: {msg.content[:50]}...\n"
        
        sql_query = chain.invoke({
            "question": question,
            "schema_details": schema_details,
            "main_table": main_table,
            "chat_context": chat_context
        })
        
        # Clean the SQL query
        sql_query = sql_query.strip()
        if sql_query.startswith("```sql"):
            sql_query = sql_query.replace("```sql", "").replace("```", "").strip()
        elif sql_query.startswith("```"):
            sql_query = sql_query.replace("```", "").strip()
        
        return sql_query
        
    except Exception as e:
        st.warning(f"SQL generation failed: {e}")
        return _generate_fallback_query(question)

def prioritize_fields(fields: List[Dict]) -> List[Dict]:
    """Prioritize most important fields"""
    priority_keywords = [
        'id', 'name', 'date', 'time', 'price', 'total', 'amount', 
        'quantity', 'status', 'type', 'code', 'description', 'customer',
        'product', 'item', 'created', 'updated'
    ]
    
    prioritized = []
    remaining = []
    
    for field in fields:
        field_name = field.get('name', '').lower()
        if any(keyword in field_name for keyword in priority_keywords):
            prioritized.append(field)
        else:
            remaining.append(field)
    
    return prioritized + remaining

def _generate_fallback_query(question: str) -> str:
    """Generate fallback SQL queries"""
    question_lower = question.lower()
    
    if any(word in question_lower for word in ["penjualan", "sales", "revenue"]):
        return "SELECT * FROM (SELECT table_name FROM information_schema.tables WHERE table_name LIKE '%transaction%' OR table_name LIKE '%sales%' LIMIT 1) LIMIT 10"
    else:
        return "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' LIMIT 10"
