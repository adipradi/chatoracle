import streamlit as st
import pandas as pd
import requests
from typing import Dict, List, Optional, Any
import logging
from functools import wraps
import time

class MetabaseClient:
    def __init__(self, base_url: str, username: str, password: str):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        self.session_token = None
        self.username = username
        self.password = password
        self.table_schemas = {}  # Cache for table schemas
        self.cache_timeout = 300  # 5 minutes cache
        self.last_auth_time = 0
        
        # Set default timeout for all requests
        self.session.timeout = 30
        
    def _require_auth(func):
        """Decorator to ensure authentication before API calls"""
        @wraps(func)
        def wrapper(self, *args, **kwargs):
            if not self.session_token or (time.time() - self.last_auth_time) > 3600:  # Re-auth every hour
                if not self.authenticate():
                    raise Exception("Authentication failed")
            return func(self, *args, **kwargs)
        return wrapper
    
    def authenticate(self):
        """Authenticate with Metabase and get session token"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/session",
                json={"username": self.username, "password": self.password},
                timeout=30
            )
            response.raise_for_status()
            
            result = response.json()
            self.session_token = result.get("id")
            
            if not self.session_token:
                raise Exception("No session token received")
                
            self.session.headers.update({"X-Metabase-Session": self.session_token})
            self.last_auth_time = time.time()
            
            return True
            
        except requests.exceptions.RequestException as e:
            st.error(f"Authentication failed - Network error: {e}")
            return False
        except Exception as e:
            st.error(f"Authentication failed: {e}")
            return False
    
    def _make_request(self, method: str, endpoint: str, **kwargs) -> Optional[Dict]:
        """Generic method to make API requests with error handling"""
        try:
            url = f"{self.base_url}/api/{endpoint.lstrip('/')}"
            response = self.session.request(method, url, **kwargs)
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.Timeout:
            st.error(f"Request timeout for {endpoint}")
            return None
        except requests.exceptions.ConnectionError:
            st.error(f"Connection error for {endpoint}")
            return None
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 401:
                st.error("Authentication expired. Please refresh the page.")
            else:
                st.error(f"HTTP error {e.response.status_code} for {endpoint}")
            return None
        except Exception as e:
            st.error(f"Request failed for {endpoint}: {e}")
            return None
    
    def _extract_items_from_response(self, data: Any, item_keys: List[str] = None) -> List[Dict]:
        """Extract items from various response formats"""
        if item_keys is None:
            item_keys = ["data", "databases", "tables", "dashboards", "cards"]
        
        items = []
        
        if isinstance(data, list):
            items = [item for item in data if isinstance(item, dict) and item.get("id")]
            
        elif isinstance(data, dict):
            # Try known keys first
            for key in item_keys:
                if key in data and isinstance(data[key], list):
                    items = [item for item in data[key] if isinstance(item, dict) and item.get("id")]
                    break
            
            # If no items found, check if data itself is an item
            if not items and data.get("id"):
                items = [data]
                
            # Last resort: search through all dict values
            if not items:
                for value in data.values():
                    if isinstance(value, list):
                        potential_items = [item for item in value if isinstance(item, dict) and item.get("id")]
                        if potential_items:
                            items = potential_items
                            break
        
        return items
    
    @_require_auth
    def get_databases(self) -> List[Dict]:
        """Get list of available databases"""
        data = self._make_request("GET", "database")
        if not data:
            return []
        
        items = self._extract_items_from_response(data, ["data", "databases"])
        
        databases = []
        for item in items:
            databases.append({
                "id": item.get("id"),
                "name": item.get("name", f"Database {item.get('id')}"),
                "engine": item.get("engine", "Unknown"),
                "is_full_sync": item.get("is_full_sync", False),
                "is_on_demand": item.get("is_on_demand", False)
            })
        
        return databases
    
    @_require_auth 
    def get_tables(self, database_id: int) -> List[Dict]:
        """Get tables for a specific database with improved caching"""
        cache_key = f"tables_{database_id}"
        
        # Check cache first
        if hasattr(self, '_table_cache') and cache_key in self._table_cache:
            cache_time, cached_tables = self._table_cache[cache_key]
            if time.time() - cache_time < self.cache_timeout:
                return cached_tables
        
        data = self._make_request("GET", f"database/{database_id}/metadata")
        if not data:
            return self._get_fallback_tables()
        
        tables = []
        
        if "tables" in data and isinstance(data["tables"], list):
            for table in data["tables"]:
                if not isinstance(table, dict):
                    continue
                    
                schema_name = table.get("schema", "public")
                table_name = table.get("name") or table.get("display_name")
                
                if not table_name:
                    continue
                
                table_info = {
                    "schema": schema_name,
                    "table": table_name,
                    "id": table.get("id"),
                    "display_name": table.get("display_name", table_name),
                    "fields": self._extract_fields(table.get("fields", []))
                }
                
                tables.append(table_info)
                
                # Cache the schema
                full_table_name = f"{schema_name}.{table_name}"
                self.table_schemas[full_table_name] = table_info["fields"]
        
        # Cache results
        if not hasattr(self, '_table_cache'):
            self._table_cache = {}
        self._table_cache[cache_key] = (time.time(), tables)
        
        return tables if tables else self._get_fallback_tables()
    
    def _extract_fields(self, fields_data: List[Dict]) -> List[Dict]:
        """Extract and normalize field information"""
        fields = []
        for field in fields_data:
            if not isinstance(field, dict):
                continue
                
            field_info = {
                "name": field.get("name"),
                "type": field.get("base_type") or field.get("type", "Unknown"),
                "display_name": field.get("display_name"),
                "description": field.get("description"),
                "semantic_type": field.get("semantic_type"),
                "is_pk": field.get("pk", False)
            }
            
            # Clean up None values
            field_info = {k: v for k, v in field_info.items() if v is not None}
            fields.append(field_info)
        
        return fields
    
    def _get_fallback_tables(self) -> List[Dict]:
        """Return fallback table structure"""
        fallback_fields = [
            {"name": "REQUEST_ID", "type": "VARCHAR", "display_name": "Request ID"},
            {"name": "REQUEST_DATE", "type": "DATE", "display_name": "Request Date"},
            {"name": "CREATION_DATE", "type": "TIMESTAMP", "display_name": "Creation Date"},
            {"name": "CUSTOMER_NAME", "type": "VARCHAR", "display_name": "Customer Name"},
            {"name": "CUSTOMER_CITY", "type": "VARCHAR", "display_name": "Customer City"},
            {"name": "CUSTOMER_PROVINCE", "type": "VARCHAR", "display_name": "Customer Province"},
            {"name": "ITEM_CODE", "type": "VARCHAR", "display_name": "Item Code"},
            {"name": "ITEM_DESCRIPTION", "type": "VARCHAR", "display_name": "Item Description"},
            {"name": "ITEM_TYPE", "type": "VARCHAR", "display_name": "Item Type"},
            {"name": "QUANTITY", "type": "INTEGER", "display_name": "Quantity"},
            {"name": "PRICE", "type": "DECIMAL", "display_name": "Unit Price"},
            {"name": "TOTAL_PRICE", "type": "DECIMAL", "display_name": "Total Price"},
            {"name": "ORG_NAME", "type": "VARCHAR", "display_name": "Organization"},
            {"name": "INVOICE_NUMBER", "type": "VARCHAR", "display_name": "Invoice Number"},
            {"name": "SO_NUMBER", "type": "VARCHAR", "display_name": "SO Number"}
        ]
        
        fallback_table = {
            "schema": "mb",
            "table": "khs_customer_transactions",
            "id": None,
            "display_name": "Customer Transactions",
            "fields": fallback_fields
        }
        
        self.table_schemas["mb.khs_customer_transactions"] = fallback_fields
        return [fallback_table]
    
    @_require_auth
    def analyze_table_structure(self, database_id: int, table_name: str) -> Dict:
        """Analyze table structure with better error handling"""
        try:
            # Use LIMIT 5 for faster response
            sample_query = f"SELECT * FROM {table_name} LIMIT 5"
            df = self.execute_query(database_id, sample_query)
            
            if df.empty:
                return {}
            
            structure_info = {
                "columns": list(df.columns),
                "sample_data": df.head(3).to_dict('records'),
                "row_count_estimate": len(df),
                "data_types": {col: str(df[col].dtype) for col in df.columns if col in df.columns}
            }
            
            # Try to get row count with timeout
            try:
                count_query = f"SELECT COUNT(*) as total_rows FROM {table_name}"
                count_df = self.execute_query(database_id, count_query)
                if not count_df.empty and 'total_rows' in count_df.columns:
                    structure_info["total_rows"] = int(count_df.iloc[0]["total_rows"])
            except Exception as e:
                logging.warning(f"Could not get row count for {table_name}: {e}")
            
            return structure_info
            
        except Exception as e:
            st.warning(f"Could not analyze table structure for {table_name}: {e}")
            return {}
    
    @_require_auth
    def execute_query(self, database_id: int, query: str, max_rows: int = 1000) -> pd.DataFrame:
        """Execute SQL query with improved error handling and limits"""
        try:
            # Add row limit if not present
            query = query.strip()
            if not any(keyword in query.upper() for keyword in ["LIMIT", "TOP"]):
                query += f" LIMIT {max_rows}"
            
            payload = {
                "type": "native",
                "native": {"query": query},
                "database": database_id
            }
            
            data = self._make_request("POST", "dataset", json=payload)
            if not data:
                return pd.DataFrame()
            
            if "data" in data and "cols" in data["data"] and "rows" in data["data"]:
                columns = [col.get("name", f"col_{i}") for i, col in enumerate(data["data"]["cols"])]
                rows = data["data"]["rows"]
                
                if not rows:
                    return pd.DataFrame(columns=columns)
                    
                df = pd.DataFrame(rows, columns=columns)
                
                # Basic data type inference
                for col in df.columns:
                    if df[col].dtype == 'object':
                        # Try to convert to datetime
                        if col.lower().endswith('_date') or 'date' in col.lower():
                            try:
                                df[col] = pd.to_datetime(df[col], errors='ignore')
                            except:
                                pass
                        # Try to convert to numeric
                        elif col.lower().endswith('_price') or 'price' in col.lower() or 'amount' in col.lower():
                            try:
                                df[col] = pd.to_numeric(df[col], errors='ignore')
                            except:
                                pass
                
                return df
            else:
                st.error(f"Unexpected response format from query execution")
                return pd.DataFrame()
                
        except Exception as e:
            st.error(f"Query execution failed: {e}")
            return pd.DataFrame()
    
    @_require_auth
    def get_dashboards(self) -> List[Dict]:
        """Get list of available dashboards"""
        data = self._make_request("GET", "dashboard")
        if not data:
            return []
        
        items = self._extract_items_from_response(data, ["data", "dashboards"])
        
        dashboards = []
        for item in items:
            dashboards.append({
                "id": item.get("id"),
                "name": item.get("name", f"Dashboard {item.get('id')}"),
                "description": item.get("description", "No description"),
                "created_at": item.get("created_at"),
                "updated_at": item.get("updated_at")
            })
        
        return dashboards
    
    @_require_auth
    def get_cards(self) -> List[Dict]:
        """Get list of available cards/questions"""
        data = self._make_request("GET", "card")
        if not data:
            return []
        
        items = self._extract_items_from_response(data, ["data", "cards"])
        
        cards = []
        for item in items:
            cards.append({
                "id": item.get("id"),
                "name": item.get("name", f"Question {item.get('id')}"),
                "description": item.get("description", "No description"),
                "database_id": item.get("database_id"),
                "table_id": item.get("table_id"),
                "created_at": item.get("created_at"),
                "updated_at": item.get("updated_at")
            })
        
        return cards
    
    def get_table_schema(self, table_name: str) -> List[Dict]:
        """Get cached table schema"""
        return self.table_schemas.get(table_name, [])
    
    def clear_cache(self):
        """Clear all cached data"""
        self.table_schemas.clear()
        if hasattr(self, '_table_cache'):
            self._table_cache.clear()
    
    def get_connection_status(self) -> Dict:
        """Get connection status information"""
        return {
            "authenticated": bool(self.session_token),
            "base_url": self.base_url,
            "session_age": time.time() - self.last_auth_time if self.last_auth_time else 0,
            "cached_schemas": len(self.table_schemas),
            "cached_tables": len(getattr(self, '_table_cache', {}))
        }
